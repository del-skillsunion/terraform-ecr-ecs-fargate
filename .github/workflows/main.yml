name: Deploy to ECR - Build Docker Image - Deploy ECS

on:
  push:
    branches:
      - main

jobs:
  vulnerabilities-audit:
    name: Check for Vulnerabilities with npm audit
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v2
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'
    - name: Install dependencies
      run: npm install
    - name: Run npm audit
      run: npm audit

  run_unit_tests:
    name: Run Unit Tests
    needs: vulnerabilities-audit
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v2
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'
    - name: Install dependencies
      run: npm install
    - name: Run unit tests
      run: npm test

  ecr_creation:
    name: Create ECR Repository
    needs: run_unit_tests
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-1

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.0.0

    - name: Check if ECR repository already exists
      id: check_ecr
      working-directory: ecr
      run: |
        terraform init
        echo "Checking if ECR repository already exists..."
        if terraform state show aws_ecr_repository.my_ecr_repo; then
          echo "ECR repository already exists."
          echo "::set-output name=exists::true"
        else
          echo "ECR repository doesn't exist."
          echo "::set-output name=exists::false"
        fi

    - name: Deploy ECR using Terraform
      if: steps.check_ecr.outputs.exists == 'false'
      working-directory: ecr
      run: |
        terraform init
        terraform apply -auto-approve
  
  docker_build_push:
    name: Build Docker Image and Push to ECR
    needs: ecr_creation
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v2
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-1

    - name: Log in to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and Push Docker image to Amazon ECR
      env:
        ECR_REGISTRY: 255945442255.dkr.ecr.ap-southeast-1.amazonaws.com
        ECR_REPOSITORY: tf-sample-application
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  terraform_force_deployment:
    name: Force New Deployment with Terraform
    needs: [docker_build_push, ecr_creation]
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-1

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.0.0

    - name: Taint ECS service for force new deployment
      working-directory: ecs
      run: |
        terraform init
        terraform taint aws_ecs_service.my_ecs_service
        terraform apply -auto-approve
